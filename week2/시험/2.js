function solution(star) {
  for (let i = 1; i <= star; i++) {
    const 공백 = i - 1;
    const 별 = 2 * (star - i + 1) - 1;
    console.log(" ".repeat(공백) + "*".repeat(별));
  }

  for (let i = star - 1; i >= 1; i--) {
    const 공백 = i - 1;
    const 별 = 2 * (star - i + 1) - 1;
    console.log(" ".repeat(공백) + "*".repeat(별));
  }
}
let star = 7;
solution(star);

// 첫째 줄에 정수 n이 주어짐.
// 예를 들어 star에 3이 들어오면 가운데를 기점으로 위 아래 각각 3줄 별이 찍혀야 함.

// star 값이 3일때, 별 5 → 공백 2 + 별 3 → 공백 4 + 별 1
// star 값이 5일때, 별 9 → 공백 2 + 별 7 → 공백 4 + 별 5 → 공백 6 + 별 3 → 공백 8 + 별 1
// star 값이 7일때, 별 13 → 공백 2 + 별 11 ..... 7번 실행.

// 이런 식으로 반복되므로 위/아래 나눠서 생각하면 반복문을 각각 하나씩 쓰면 됨.
// for문을 쓰면 i는 현재 줄의 번호, i가 1이면 첫번째 줄, 2이면 2번째 줄이 됨.
// 그럼, i값이 증가하면서 현재 줄의 앞쪽 공백과 별의 갯수를 계산하여 출력할 수 있음.

// 현재 줄의 공백 갯수는 i -1로 계산.
// 예를 들어 첫번째 줄에서는 공백이 없으므로 0이 될 것이고,
// 두번째 줄은 앞에 공백이 1, 세번째 줄은 앞쪽 공백이 2칸 이런 식이 됨.

// 그리고 star는 전체 줄의 갯수를 나타냄.
// 위 예시를 보면 별의 갯수를 셀 때 어떤 규칙 같은게 있음.
// 즉, star가 3일 때 1번 줄의 별의 갯수는 5개이니 2* (star -1 +1) -1 이렇게 표현할 수 있고
// 2번 줄의 별의 갯수는 3이어야 하고 2번째 줄이란 걸 생각하면 2* (star -2 +1) -1
// 3번 줄의 별의 갯수는 1이어야 하고 3번째 줄이란 걸 생각하면 2* (star -3 +1) -1
// 수식으로 표현하면  2 * (star - i +1) -1

// 위에서 계산한 공백과 별의 갯수를 가지고 콘솔에 출력하면 끗.

// 아랫부분은 윗 부분에 비해 공백이 감소하면서 진행됨.
// 즉 i값이 줄어들기 때문에 반복문에 --와 같이 감소연산자를 사용함.
// 나머지 공백과 별을 구하는 부분은 같음.
